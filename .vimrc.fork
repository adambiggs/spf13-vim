" Use zsh as shell
set shell=/bin/zsh

" Override some spf13 defaults
set shiftwidth=2  " Use indents of 2 spaces
set tabstop=2     " An indentation every 2 columns
set softtabstop=2 " Let backspace delete indent

" User patched Powerline fonts
set guifont=Source\ Code\ Pro\ for\ Powerline:h13,Menlo\ Regular:h15

" JSON syntax settings
autocmd FileType json setlocal conceallevel=0 foldmethod=syntax foldlevel=1

" Custom snippet libraries
let g:neosnippet#snippets_directory = '~/.vim/bundle/coffeescript-vim-snippets'

" Indent Guides
let g:indent_guides_guide_size = 2
let g:indent_guides_start_level = 1

" Airline
let g:airline#extensions#tabline#enabled = 1        " Enable tabline
let g:airline#extensions#tabline#tab_min_count = 2  " Only show tabline if using multiple tabs
let g:airline#extensions#tabline#show_buffers = 0   " Use MBE for buffers instead

" MiniBufExplorer
let g:miniBufExplBRSplit = 0        " Put MBE at the top of the screen
let g:miniBufExplBuffersNeeded = 0  " Always show MBE

" CtrlP
let g:ctrlp_extensions = ['buffertag']          " Enable searching for CTAGS in the current buffer
let g:ctrlp_root_markers = ['Gruntfile.coffee']
let g:ctrlp_show_hidden = 1
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("h")': ['<c-x>', '<c-s>'],
  \ 'PrtExit()':            ['<esc>', '<c-c>', '<c-g>', '<c-cr'],
  \ }

" UndoTree
let g:undotree_SplitWidth = 35
let g:undotree_TreeNodeShape = 'â—‰'

" NERDTree
let NERDTreeShowLineNumbers = 1
let NERDTreeIgnore = ['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\.map$', '.DS_Store']
let g:nerdtree_tabs_smart_startup_focus = 1

" CoffeeScript
autocmd FileType coffee setlocal foldmethod=indent foldlevel=2
autocmd FileType coffee autocmd BufWritePre <buffer> call StripTrailingWhitespace()
let coffee_compile_vert = 1 " Show compiled output in a vertical split

" TagBar
let g:tagbar_autoshowtag = 1      " Open folds if necessary when navigating to a tag
let g:tagbar_autoclose = 1        " Focus cursor inside tagbar when opened, and auto close after navigation
let g:tagbar_show_linenumbers = 2 " Show relative line numbers
let g:tagbar_foldlevel = 1        " Custom fold level

" QuickHL
let g:quickhl_cword_enable_at_startup = 1
let g:quickhl_cword_hl_command = 'link QuickhlCword QuickhlTag' " Change default word highlighting to be less annoying
autocmd BufRead,BufNewFile * call quickhl#cword#enable()        " Hack alert! `g:quickhl_..._enable_at_startup` doesn't seem to work...

" Markdown preview via Marked.app
function! s:setupMarkdownPreview()
  nnoremap <leader>md :silent !open -a Marked.app '%:p'<cr>
endfunction
autocmd BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkdownPreview()


" EXTRA KEY MAPPINGS "

" Reset MBE window position after moving windows
map <C-w>H <C-w>H:MBEOpen!<CR><Leader>=
map <C-w>J <C-w>J:MBEOpen!<CR><Leader>=
map <C-w>K <C-w>K:MBEOpen!<CR><Leader>=
map <C-w>L <C-w>L:MBEOpen!<CR><Leader>=

" Like spf13 'easyWindows' mapping, but without the window resizing
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h

" Zoom current split
nnoremap <Leader>- <C-W><Bar>
nnoremap <Leader>_ <C-W>_

" Insert new lines with Enter key
nmap <CR> o<Esc>
nmap <S-CR> O<Esc>

" Center cursor with spacebar in normal mode
nnoremap <Space> zz

" Vim-Over
nnoremap <C-s> :OverCommandLine<CR>%s/
